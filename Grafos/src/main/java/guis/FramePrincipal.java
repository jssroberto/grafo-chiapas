package guis;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Roberto García
 */
public class FramePrincipal extends javax.swing.JFrame {

    JPanel panelActual;

    /**
     * Creates new form FramePrincipal
     */
    public FramePrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Localidades de Chiapas");
        setMaximumSize(new java.awt.Dimension(1200, 800));
        setMinimumSize(new java.awt.Dimension(1200, 800));
        setSize(new java.awt.Dimension(1200, 800));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    

    /**
     * Método para limpiar el contenido de la ventana. Si hay un panel
     * actualmente mostrado, lo elimina de la ventana.
     */
    public void limpiarFrame() {
        if (panelActual != null) {
            this.remove(panelActual);
            panelActual = null;
        }
    }

    /**
     * Método para agregar un panel a la ventana. Este método agrega el panel
     * especificado a la ventana, lo posiciona y ajusta su tamaño
     * automáticamente.
     *
     * @param panel El panel que se va a agregar a la ventana.
     */
    public void ponerEnJFrame(JPanel panel) {
        this.add(panel);
        panel.setBounds(0, 0, 1200, 800);
        this.setLocationRelativeTo(null);
        this.pack();  // Ajustar el tamaño automáticamente
    }
    
    /**
     * Método para cambiar a la vista de la ventana de Inicio. Este método
     * elimina el panel actual
     */
    public void cambiarVistaInicio() {
        limpiarFrame();
        PanelInicio panelInicio = new PanelInicio(this);
        ponerEnJFrame(panelInicio);
        panelActual = panelInicio;
    }

    /**
     * Método para mostrar un aviso al usuario mediante una ventana emergente.
     *
     * @param mensaje El mensaje a mostrar en el aviso.
     */
    public void mostrarAviso(String mensaje, String titulo) {
        JOptionPane.showMessageDialog(this, mensaje, titulo, JOptionPane.WARNING_MESSAGE);
    }

    /**
     * Método para mostrar una ventana emergente de confirmación al usuario.
     *
     * @param mensaje El mensaje a mostrar en la ventana de confirmación.
     * @param titulo El título de la ventana de confirmación.
     * @return true si el usuario selecciona "OK", false si selecciona
     * "Cancelar".
     */
    public boolean mostrarConfirmacion(String mensaje, String titulo) {
        int respuesta = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.OK_CANCEL_OPTION);
        return respuesta == JOptionPane.OK_OPTION;
    }

    /**
     * Método para mostrar una ventana emergente de información al usuario.
     *
     * @param mensaje El mensaje a mostrar en la ventana de información.
     * @param titulo El título de la ventana de información.
     */
    public void mostrarInformacion(String mensaje, String titulo) {
        JOptionPane.showMessageDialog(this, mensaje, titulo, JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Método para mostrar una ventana emergente con dos opciones al usuario.
     *
     * @param mensaje El mensaje a mostrar en la ventana emergente.
     * @param titulo El título de la ventana emergente.
     * @param opcion1 El texto de la primera opción.
     * @param opcion2 El texto de la segunda opción.
     * @return La opción seleccionada por el usuario (1 para la primera opción,
     * 2 para la segunda opción). Si el usuario cierra la ventana sin
     * seleccionar ninguna opción, se devuelve 0.
     */
    public int mostrarOpciones(String mensaje, String titulo, String opcion1, String opcion2) {
        Object[] opciones = {opcion1, opcion2};
        int seleccion = JOptionPane.showOptionDialog(
                this, //Padre
                mensaje, // Mensaje a mostrar
                titulo, // Título del JOptionPane
                JOptionPane.YES_NO_OPTION, // Tipo de opciones (en este caso, Sí/No)
                JOptionPane.QUESTION_MESSAGE, // Tipo de icono (en este caso, pregunta)
                null, // Icono personalizado (en este caso, ninguno)
                opciones, // Opciones a mostrar
                opciones[0]); // Opción por defecto seleccionada
        // Ajustar el valor de retorno para que coincida con las opciones (1 y 2)
        return switch (seleccion) {
            case JOptionPane.YES_OPTION ->
                1;
            case JOptionPane.NO_OPTION ->
                2;
            default ->
                0;
        }; // El usuario cerró el JOptionPane o presionó la X para salir
    }
}
